# How can I see what branches my repository has?

# By default, every Git repository has a branch called master 
# (which is why you have been seeing that word in Git's output 
# in previous lessons). To list all of the branches in a 
# repository, you can run the command git branch. 
# The branch you are currently in will be shown with a * beside 
# its name.

git branch

# view the differences between branches?

# Branches and revisions are closely connected, and 
# commands that work on the latter usually work on the former. 
# For example, just as git diff revision-1..revision-2 shows 
# the difference between two versions of a repository, git diff 
# branch-1..branch-2 shows the difference between two branches.

# switch from one branch to another?

# You previously used git checkout with a commit hash to 
# switch the repository state to that hash. You can also use 
# git checkout with the name of a branch to switch to that 
# branch.

Two notes:

    When you run git branch, it puts a * beside the name of 
    the branch you are currently in.
    Git will only let you do this if all of your changes 
    have been committed. You can get around this, but it is 
    outside the scope of this course.

# In this exercise, you'll also make use of git rm. 
# This removes the file (just like the shell command rm) 
# then stages the removal of that file with git add, all in 
# one step.

git checkout summary-statistics
git rm report.txt
git commit -m "Removing report"
ls 
git checkout master
ls

# How can I create a branch?

# You might expect that you would use git branch to create a 
# branch, and indeed this is possible. However, the most 
# common thing you want to do is to create a branch 
# then switch to that branch.

# In the previous exercise, you used git checkout branch-name 
# to switch to a branch. To create a branch then switch to it 
# in one step, you add a -b flag, calling git checkout -b 
# branch-name,

# The contents of the new branch are initially 
# identical to the contents of the original. Once you start 
# making changes, they only affect the new branch.

git checkout -b deleting-report
git rm report.txt
git commit -m "Removed report.txt"
git diff master..deleting-report

# How can I merge two branches?

# Branching lets you create parallel universes; merging is 
# how you bring them back together. When you merge one branch 
# (call it the source) into another (call it the destination), 
# Git incorporates the changes made to the source branch into 
# the destination branch. If those changes don't overlap, the 
# result is a new commit in the destination branch that includes 
# everything from the source branch (the next exercises 
# describe what happens if there are conflicts).

# To merge two branches, you run git merge source destination 
# (without .. between the two branch names). Git automatically 
# opens an editor so that you can write a log message for 
# the merge; you can either keep its default message or fill 
# in something more informative.

git merge summary-statistics master -m "Merging summary statistics."

# What are conflicts?

# Sometimes the changes in two branches will conflict with 
# each other: for example, bug fixes might touch the same 
# lines of code, or analyses in two different branches may 
# both append new (and different) records to a summary data 
# file. In this case, Git relies on you to reconcile the 
# conflicting changes.

# How can I merge two branches with conflicts?

# When there is a conflict during a merge, 
# Git tells you that there's a problem, 
# and running git status after the merge reminds 
# you which files have conflicts that you need to resolve 
# by printing both modified: beside the files' names.

# Inside the file, Git leaves markers that look like this 
# to tell you where the conflicts occurred:

# <<<<<<< destination-branch-name
...changes from the destination branch...
=======
...changes from the source branch...
>>>>>>> source-branch-name

#

# In many cases, the destination branch name will be 
# HEAD because you will be merging into the current branch. 
# To resolve the conflict, edit the file to remove the markers 
# and make whatever other changes are needed to reconcile the 
# changes, then commit those changes.

git merge alter-report-title master
git status
nano report.txt
git add report.txt
git commit -m "Conflict resolved."

