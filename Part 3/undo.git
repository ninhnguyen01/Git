# commit changes selectiveley?

# The syntax for staging a single file is git add path/to/file.
# If you make a mistake and accidentally stage a file you 
# shouldn't have, you can unstage the additions with git 
# reset HEAD and try again.

git add data/northern.csv
git commit -m "Adding data from northern region."

# re-stage files?

git status
git add data/northern.csv

# undo changes to unstaged files?

# The command:

git checkout -- filename

# will discard the changes that have not yet been staged. 
# (The double dash -- must be there to separate the git 
# checkout command from the names of the file or files you 
# want to recover.)

# Use this command carefully: once you discard changes in 
# this way, they are gone forever.

git checkout -- data/northern.csv

# undo changes to staged files?

# At the start of this chapter you saw that 
# git reset will unstage files that you previously 
# staged using git add. By combining git reset with 
# git checkout, you can undo changes to a file that 
# you staged changes to. The syntax is as follows.

git reset HEAD path/to/file
git checkout -- path/to/file

# (You may be wondering why there are two commands 
# for re-setting changes. The answer is that unstaging 
# a file and undoing changes are both special cases of 
# more powerful Git operations that you have not yet seen.)

git reset data/northern.csv
git checkout data/northern.csv

# restore an old version of a file?

# For example, if git log shows this:

commit ab8883e8a6bfa873d44616a0f356125dbaccd9ea
Author: Author: Rep Loop <repl@datacamp.com>
Date:   Thu Oct 19 09:37:48 2017 -0400

    Adding graph to show latest quarterly results.

commit 2242bd761bbeafb9fc82e33aa5dad966adfe5409
Author: Author: Rep Loop <repl@datacamp.com>
Date:   Thu Oct 16 09:17:37 2017 -0400

    Modifying the bibliography format.

# then git checkout 2242bd report.txt would replace 
# the current version of report.txt with the version 
# that was committed on October 16. Notice that this 
# is the same syntax that you used to undo the unstaged 
# changes, except -- has been replaced by a hash.

# One more thing: there's another feature of git log that will 
# come in handy here. Passing - followed by a number restricts 
# the output to that many commits. For example, 
# git log -3 report.txt 
# shows you the last three commits involving report.txt.

git log -2 data/western.csv
git checkout 29a5 data/western.csv
cat data/western.csv
git commit data/western.csv -m "test."

# undo all of the changes I have made?
# One way to do this is to give git reset a directory. 
# For example, git reset HEAD data will unstage any files 
# from the data directory. Even better, if you don't provide 
# any files or directories, it will unstage everything. 
# Even even better, HEAD is the default commit to unstage, 
# so you can simply write git reset to unstage everything.

# Similarly git checkout -- data will then restore the 
# files in the data directory to their previous state. 
# You can't leave the file argument completely blank, 
# but recall from Introduction to Shell for Data Science 
# that you can refer to the current directory as .. 
# So git checkout -- . will revert all files in the 
# current directory.

git reset
git checkout -- .

