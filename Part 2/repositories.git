# what is a hash?

# Every commit to a repository has a unique identifier 
# called a hash (since it is generated by running the changes 
# through a pseudo-random number generator called a 
# hash function). This hash is normally written as a 
# 40-character hexadecimal string like 
# 7c35a3ce607a14953f070f0f83b5d74c2296ef93, 
# but most of the time, you only have to give Git 
# the first 6 or 8 characters in order to identify 
# the commit you mean.

cd dental
git log

# view specific commit?

# To view the details of a specific commit, you use the command 
# git show with the first few characters of the commit's hash. 
# For example, the command git show 0da2f7 produces this:

commit 0da2f7ad11664ca9ed933c1ccd1f3cd24d481e42
Author: Rep Loop <repl@datacamp.com>
Date:   Wed Sep 5 15:39:18 2018 +0000

    Added year to report title.

diff --git a/report.txt b/report.txt
index e713b17..4c0742a 100644
--- a/report.txt
+++ b/report.txt
@@ -1,4 +1,4 @@
-# Seasonal Dental Surgeries 2017-18
+# Seasonal Dental Surgeries (2017) 2017-18

 TODO: write executive summary.

#

git log
git show fdaad

# relative path?

HEAD~1

# who changed what in a file?

# The command git annotate file shows who made the last 
# change to each line of a file and when. For example, 
# the first three lines of output from git annotate report.txt 
# look something like this:

04307054        (  Rep Loop     2017-09-20 13:42:26 +0000       1)# Seasonal Dental Surgeries (2017) 2017-18
5e6f92b6        (  Rep Loop     2017-09-20 13:42:26 +0000       2)
5e6f92b6        (  Rep Loop     2017-09-20 13:42:26 +0000       3)TODO: write executive summary.

Each line contains five elements, with elements two to four enclosed in parentheses. When inspecting the first line, we see:

    1.The first eight digits of the hash, 04307054.
    2.The author, Rep Loop.
    3.The time of the commit, 2017-09-20 13:42:26 +0000.
    4.The line number, 1.
    5. The contents of the line, # Seasonal Dental Surgeries (2017) 2017-18.

#

git annotate report.txt

# changed between 2 commits?

# To see the changes between two commits, 
# you can use git diff ID1..ID2, 
# where ID1 and ID2 identify the two commits you're interested in, 
# and the connector .. is a pair of dots. 
# For example, git diff abc123..def456 shows 
# the differences between the commits abc123 and def456, 
# while git diff HEAD~1..HEAD~3 shows the differences 
# between the state of the repository one commit in the 
# past and its state three commits in the past.

# add new files?

git status
git add sources.txt
git commit sources.txt -m "Starting to track data sources."

# ignore certain files?

# How do I tell Git to ignore certain files?
# Data analysis often produces temporary or intermediate 
# files that you don't want to save. You can tell it to stop 
# paying attention to files you don't care about by creating a 
# file in the root directory of your repository called .gitignore 
# and storing a list of wildcard patterns that specify the files 
# you don't want Git to pay attention to. 
# For example, if .gitignore contains:

build
*.mpl

# then Git will ignore any file or directory called build 
(and, if it's a directory, anything in it), as well as 
any file whose name ends in .mpl.

# unwanted files?

# Git can help you clean up files that you have told 
# it you don't want. The command git clean -n will show you a 
# list of files that are in the repository, but whose history 
# Git is not currently tracking. A similar command git 
# clean -f will then delete those files.

# Use this command carefully: git clean only works on 
# untracked files, so by definition, their history has not 
# been saved. If you delete them with git clean -f, 
# they're gone for good.

git status
git clean -f
ls 

# Git is configured?

# Like most complex pieces of software, Git allows you to 
# change its default settings. To see what the settings are, 
# you can use the command git config --list with one of three 
# additional options:

    --system: settings for every user on this computer.
    --global: settings for every one of your projects.
    --local: settings for one specific project.

# Each level overrides the one above it, 
# so local settings (per-project) take precedence over 
# global settings (per-user), which in turn take precedence 
# over system settings (for all users on the computer).

git config --list --local

# change my git configuration?

# Most of Git's settings should be left as they are. 
# However, there are two you should set on every computer 
# you use: your name and your email address. 
# These are recorded in the log every time you commit a change, 
# and are often used to identify the authors of a project's 
# content in order to give credit (or assign blame, 
# depending on the circumstances).

# To change a configuration value for all of your projects 
# on a particular computer, run the command:

git config --global setting value

# Using this command, you specify the setting you want to 
# change and the value you want to set. 
# The settings that identify your name and email address 
# are user.name and user.email, respectively.

git config --global user.email rep.loop@datacamp.com 

